diff --git a/gdb/Makefile.in b/gdb/Makefile.in
index fa7c81a0fab..258cc35ac88 100644
--- a/gdb/Makefile.in
+++ b/gdb/Makefile.in
@@ -771,6 +771,7 @@ ALL_TARGET_OBS = \
 	arm-obsd-tdep.o \
 	arm-pikeos-tdep.o \
 	arm-tdep.o \
+	arm-vita-tdep.o \
 	arm-wince-tdep.o \
 	avr-tdep.o \
 	bfin-linux-tdep.o \
diff --git a/gdb/arm-vita-tdep.c b/gdb/arm-vita-tdep.c
new file mode 100644
index 00000000000..5fdcea08b5d
--- /dev/null
+++ b/gdb/arm-vita-tdep.c
@@ -0,0 +1,53 @@
+/*
+   Copyright (C) 2019 David "Davee" Morgan
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "defs.h"
+#include "arm-tdep.h"
+#include "osabi.h"
+
+#include <string.h>
+
+static bfd_boolean find_vitalink_section(bfd *abfd, asection *section, void *)
+{
+    return strncmp(section->name, ".vitalink", strlen(".vitalink")) == 0;
+}
+
+static void
+arm_vita_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
+{
+    // enable single stepping for target
+    set_gdbarch_software_single_step (gdbarch, arm_software_single_step);
+}
+
+static enum gdb_osabi
+arm_vita_osabi_sniffer (bfd *abfd)
+{
+    // for vita we look for .vitalink. section
+    if (bfd_sections_find_if(abfd, find_vitalink_section, NULL) != NULL)
+        return GDB_OSABI_VITA;
+    else
+        return GDB_OSABI_UNKNOWN;
+}
+
+void
+_initialize_arm_vita_tdep (void)
+{
+    gdbarch_register_osabi_sniffer (bfd_arch_arm, bfd_target_elf_flavour,
+                                   arm_vita_osabi_sniffer);
+    gdbarch_register_osabi (bfd_arch_arm, 0, GDB_OSABI_VITA,
+                            arm_vita_init_abi);
+}
diff --git a/gdb/configure.tgt b/gdb/configure.tgt
index e84e222ba0d..61202f9e3ae 100644
--- a/gdb/configure.tgt
+++ b/gdb/configure.tgt
@@ -198,6 +198,10 @@ arm*-*-openbsd*)
 	# Target: OpenBSD/arm
 	gdb_target_obs="arm-bsd-tdep.o arm-obsd-tdep.o"
 	;;
+arm*-vita-eabi)
+  # Target: PS Vita
+  gdb_target_obs="arm-vita-tdep.o"
+  ;;
 arm*-*-*)
 	# Target: ARM embedded system
 	gdb_target_obs="arm-pikeos-tdep.o"
diff --git a/gdb/osabi.c b/gdb/osabi.c
index d18802ac3a4..8bc8f8bbbb4 100644
--- a/gdb/osabi.c
+++ b/gdb/osabi.c
@@ -82,6 +82,7 @@ static const struct osabi_names gdb_osabi_names[] =
   { "Newlib", NULL },
   { "SDE", NULL },
   { "PikeOS", NULL },
+  { "PSVita", NULL },
 
   { "<invalid>", NULL }
 };
diff --git a/gdb/osabi.h b/gdb/osabi.h
index 35f14ec433c..14504ce650f 100644
--- a/gdb/osabi.h
+++ b/gdb/osabi.h
@@ -46,6 +46,7 @@ enum gdb_osabi
   GDB_OSABI_NEWLIB,
   GDB_OSABI_SDE,
   GDB_OSABI_PIKEOS,
+  GDB_OSABI_VITA,
 
   GDB_OSABI_INVALID		/* keep this last */
 };
diff --git a/gdb/python/py-gdb-readline.c b/gdb/python/py-gdb-readline.c
index ea0f78c9ad8..4aa270b41ac 100644
--- a/gdb/python/py-gdb-readline.c
+++ b/gdb/python/py-gdb-readline.c
@@ -52,13 +52,11 @@ gdbpy_readline_wrapper (FILE *sys_stdin, FILE *sys_stdout,
       if (except.reason == RETURN_QUIT)
 	return NULL;
 
-      /* The thread state is nulled during gdbpy_readline_wrapper,
-	 with the original value saved in the following undocumented
-	 variable (see Python's Parser/myreadline.c and
-	 Modules/readline.c).  */
-      PyEval_RestoreThread (_PyOS_ReadlineTState);
+
+      /* This readline callback is called without the GIL held.  */
+      gdbpy_gil gil;
+
       gdbpy_convert_exception (except);
-      PyEval_SaveThread ();
       return NULL;
     }
 
diff --git a/gdb/python/python-internal.h b/gdb/python/python-internal.h
index c41a43bac96..96c0008ae25 100644
--- a/gdb/python/python-internal.h
+++ b/gdb/python/python-internal.h
@@ -706,6 +706,30 @@ class gdbpy_allow_threads
   PyThreadState *m_save;
 };
 
+/* A helper class to save and restore the GIL, but without touching
+   the other globals that are handled by gdbpy_enter.  */
+
+class gdbpy_gil
+{
+public:
+
+  gdbpy_gil ()
+    : m_state (PyGILState_Ensure ())
+  {
+  }
+
+  ~gdbpy_gil ()
+  {
+    PyGILState_Release (m_state);
+  }
+
+  DISABLE_COPY_AND_ASSIGN (gdbpy_gil);
+
+private:
+
+  PyGILState_STATE m_state;
+};
+
 /* Use this after a TRY_EXCEPT to throw the appropriate Python
    exception.  */
 #define GDB_PY_HANDLE_EXCEPTION(Exception)	\
diff --git a/gdb/python/python.c b/gdb/python/python.c
index 9d558119e09..4e0692abed8 100644
--- a/gdb/python/python.c
+++ b/gdb/python/python.c
@@ -255,30 +255,6 @@ gdbpy_enter::finalize ()
   python_gdbarch = target_gdbarch ();
 }
 
-/* A helper class to save and restore the GIL, but without touching
-   the other globals that are handled by gdbpy_enter.  */
-
-class gdbpy_gil
-{
-public:
-
-  gdbpy_gil ()
-    : m_state (PyGILState_Ensure ())
-  {
-  }
-
-  ~gdbpy_gil ()
-  {
-    PyGILState_Release (m_state);
-  }
-
-  DISABLE_COPY_AND_ASSIGN (gdbpy_gil);
-
-private:
-
-  PyGILState_STATE m_state;
-};
-
 /* Set the quit flag.  */
 
 static void
